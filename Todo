it('should handle visibility correctly', () => {
    const mockAvenant = { id: 123, visible: false } as any; // Replace 'any' with actual type
    
    spyOn(component.errorService, 'httpError');
    httpClient.put.and.returnValue(of({}));

    component.setVisible(mockAvenant, true);
    expect(httpClient.put).toHaveBeenCalledWith(
        `/api/coffre/avenant/${mockAvenant.id}/enable`,
        mockAvenant
    );

    httpClient.put.and.returnValue(throwError(() => new Error('Error')));

    component.setVisible(mockAvenant, false);
    expect(component.errorService.httpError).toHaveBeenCalled();
});
it('should open the correct dialog with expected data', () => {
    spyOn(component.dialogService, 'open').and.callThrough();

    const mockAvenant = { id: 1, data: {} };
    component.avenantDialog(mockAvenant);

    expect(component.dialogService.open).toHaveBeenCalledWith(CoffreAvenantDialogComponent, {
        data: { avenantId: mockAvenant.id, data: mockAvenant.data }
    });
});

it('should handle error in refreshAvenant', () => {
    spyOn(component.errorService, 'httpError');

    const errorResponse = new Error('Test Error');
    spyOn(component.coffreAvenantSignatureService, 'loadByLocation').and.returnValue(throwError(() => errorResponse));
    
    component.refreshAvenant(123);
    
    expect(component.errorService.httpError).toHaveBeenCalledWith(errorResponse);
});

it('should handle non-conforme correctly', () => {
    const mockAvenant = { conforme: true };

    component.checkConformity(mockAvenant);

    expect(component.conforme).toBe('true');

    mockAvenant.conforme = false;
    component.checkConformity(mockAvenant);

    expect(component.conforme).toBe('false');
});

