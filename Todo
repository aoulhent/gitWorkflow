import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.List;

@ExtendWith(MockitoExtension.class)
class CoffreUtilServiceTest {

    @Mock
    private UserService userService;

    @Mock
    private CoffreContrat coffreContrat;

    @Mock
    private CoffreData coffreData;

    @Mock
    private Pdv pdv;

    @InjectMocks
    private CoffreUtilService coffreUtilService;

    @BeforeEach
    void setUp() {
        when(userService.getCurrentUser()).thenReturn(mock(User.class));
    }

    @Test
    void testIsPlaceHolderContrat_case_CA() {
        when(coffreContrat.getClient()).thenReturn("Client Name");

        String result = ReflectionTestUtils.invokeMethod(coffreUtilService, "isPlaceHolderContrat", "C_AA", coffreContrat, coffreData);

        assertEquals("Client Name", result);
    }

    @Test
    void testIsPlaceHolderContrat_case_CB_emptyList() {
        when(coffreData.getCoffreLocation()).thenReturn(null);

        String result = ReflectionTestUtils.invokeMethod(coffreUtilService, "isPlaceHolderContrat", "C_AB", coffreContrat, coffreData);

        assertTrue(result.isEmpty());
    }

    @Test
    void testIsPlaceHolderContrat_case_CE_withValue() {
        when(coffreContrat.getDatePremierReglement()).thenReturn(new Date());
        when(coffreData.getCoffreLocation()).thenReturn(mock(CoffreLocation.class));
        when(coffreData.getCoffreLocation().getDatePremierReglement()).thenReturn(new Date());

        String result = ReflectionTestUtils.invokeMethod(coffreUtilService, "isPlaceHolderContrat", "C_E", coffreContrat, coffreData);

        assertNotNull(result);
    }

    @Test
    void testIsPlaceHolderContrat_case_CB_listWithValues() {
        CoffreCoLocataire col = mock(CoffreCoLocataire.class);
        when(col.getNomPrenom()).thenReturn("John Doe");

        CoffreLocation location = mock(CoffreLocation.class);
        when(location.getCoffreColocataires()).thenReturn(Collections.singletonList(col));
        when(coffreData.getCoffreLocation()).thenReturn(location);

        String result = ReflectionTestUtils.invokeMethod(coffreUtilService, "isPlaceHolderContrat", "C_CB", coffreContrat, coffreData);

        assertEquals("John Doe", result);
    }

    @Test
    void testIsPlaceHolderContrat_caseUserFullName() {
        User user = mock(User.class);
        when(user.getFullnameAndUsername()).thenReturn("User Name");
        when(userService.getCurrentUser()).thenReturn(user);

        String result = ReflectionTestUtils.invokeMethod(coffreUtilService, "isPlaceHolderContrat", "C_BF", coffreContrat, coffreData);

        assertEquals("User Name", result);
    }

    @Test
    void testIsPlaceHolderContrat_caseWithDefault() {
        String result = ReflectionTestUtils.invokeMethod(coffreUtilService, "isPlaceHolderContrat", "UNKNOWN", coffreContrat, coffreData);

        assertEquals("", result);
    }

    @Test
    void testIsPlaceHolderContrat_caseC_BA_handlesNull() {
        when(coffreData.getCoffreLocation()).thenReturn(null);

        String result = ReflectionTestUtils.invokeMethod(coffreUtilService, "isPlaceHolderContrat", "C_BA", coffreContrat, coffreData);

        assertEquals("", result);
    }

    @Test
    void testIsPlaceHolderContrat_caseDateFormat() {
        when(coffreContrat.getContratDate()).thenReturn(new Date());

        String result = ReflectionTestUtils.invokeMethod(coffreUtilService, "isPlaceHolderContrat", "C_BD", coffreContrat, coffreData);

        assertNotNull(result);
    }
    
    @Test
    void testIsMonaco_shouldReturnTrue() throws Exception {
        when(pdv.getEntiy()).thenReturn(mock(Entiy.class));
        when(pdv.getEntiy().getGroup()).thenReturn(mock(Group.class));
        when(pdv.getEntiy().getGroup().getNumber()).thenReturn("MO");

        boolean result = coffreUtilService.isMonaco(pdv);

        assertTrue(result);
    }

    @Test
    void testIsMonaco_shouldReturnFalse() throws Exception {
        when(pdv.getEntiy()).thenReturn(mock(Entiy.class));
        when(pdv.getEntiy().getGroup()).thenReturn(mock(Group.class));
        when(pdv.getEntiy().getGroup().getNumber()).thenReturn("NOTMO");

        boolean result = coffreUtilService.isMonaco(pdv);

        assertFalse(result);
    }
}
