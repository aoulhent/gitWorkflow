import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(MockitoExtension.class)
class CoffreUtilServiceTest {

    @Mock
    private EntityManager entityManager;

    @Mock
    private UserService userService;  // Mock the UserService

    @Mock
    private User user;  // Mock the User object

    @InjectMocks
    private CoffreUtilService coffreUtilService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        
        // Mock the behavior of userService.getCurrentUser() to return the mock User
        when(userService.getCurrentUser()).thenReturn(user);
        
        // Mock the user object behavior to avoid NullPointerException
        when(user.getBmdRold()).thenReturn("mockRole");
        
        // Inject the mock UserService into CoffreUtilService using reflection
        ReflectionTestUtils.setField(coffreUtilService, "userService", userService);
    }

    @Test
    void testLoadCoffreData_Success() {
        // Arrange
        CriteriaBuilder cb = mock(CriteriaBuilder.class);
        CriteriaQuery<CoffreData> cq = mock(CriteriaQuery.class);
        Root<CoffreData> root = mock(Root.class);
        TypedQuery<CoffreData> typedQuery = mock(TypedQuery.class);

        when(entityManager.getCriteriaBuilder()).thenReturn(cb);
        when(cb.createQuery(CoffreData.class)).thenReturn(cq);
        when(cq.from(CoffreData.class)).thenReturn(root);

        Predicate predicate = mock(Predicate.class);
        when(cb.equal(root.get("id"), 1L)).thenReturn(predicate);
        when(cq.select(root)).thenReturn(cq);
        when(cq.where(predicate)).thenReturn(cq);

        when(entityManager.createQuery(cq)).thenReturn(typedQuery);
        when(typedQuery.getSingleResult()).thenReturn(mock(CoffreData.class));

        // Act
        CoffreData result = coffreUtilService.loadCoffreData(1L);

        // Assert
        assertNotNull(result);
        verify(entityManager, times(1)).createQuery(cq);
        verify(typedQuery, times(1)).getSingleResult();
        verify(userService, times(1)).getCurrentUser();  // Ensure userService.getCurrentUser() was called
        verify(user, times(1)).getBmdRold(); // Ensure the method was called on the mock user
    }
}
