import { TestBed } from '@angular/core/testing';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { CoffreLocationMonClientComponent } from './path-to-component';
import { ActivatedRoute } from '@angular/router';
import { UserService } from './path-to-user-service';
import { CoffreParametreService } from './path-to-coffre-parametre-service';
import { CoffreLocationService } from './path-to-coffre-location-service';

// Mock services and dependencies as needed
class MockCoffreParametreService {
    listeNonConformites() {
        return of([{ id: 1, name: 'Non-Conformity 1' }]);
    }
}

describe('CoffreLocationMonClientComponent', () => {
    let component: CoffreLocationMonClientComponent;
    let router: jasmine.SpyObj<Router>;

    beforeEach(() => {
        const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);
        
        TestBed.configureTestingModule({
            providers: [
                CoffreLocationMonClientComponent,
                { provide: Router, useValue: routerSpy },
                { provide: ActivatedRoute, useValue: {} },
                { provide: UserService, useValue: {} },
                { provide: CoffreParametreService, useClass: MockCoffreParametreService },
                { provide: CoffreLocationService, useValue: {} },
                // Add other dependencies as needed
            ]
        });

        component = TestBed.inject(CoffreLocationMonClientComponent);
        router = TestBed.inject(Router) as jasmine.SpyObj<Router>;
    });

    it('should create the component and initialize services', () => {
        expect(component).toBeTruthy();
        expect(component.coffreLocation).toBeDefined();
        expect(component.isAdmin).toBe(false);
    });

    it('should correctly initialize data on ngOnInit', () => {
        spyOn(component, 'initData').and.callThrough();
        component.ngOnInit();
        expect(component.initData).toHaveBeenCalled();
    });

    it('should correctly set `isAdmin` based on the condition', () => {
        component.isAdmin = true;
        expect(component.isAdmin).toBeTrue();

        component.isAdmin = false;
        expect(component.isAdmin).toBeFalse();
    });

    it('should select the correct item in selectItemRegHum', () => {
        let option = { id: 1, name: 'Option 1' };
        component.selectItemRegHum(option);
        expect(component.selectedItem).toEqual(option);
    });

    it('should fetch non-conformities and set options correctly', () => {
        component.loadOptions();
        expect(component.selectItemNonConformites.length).toBe(1);
        expect(component.selectItemNonConformites[0].name).toBe('Non-Conformity 1');
    });

    it('should navigate to a different URL', () => {
        component.coffreLocation.relationCommerciale = { id: 1 };
        component.isAdmin = true;
        component.ngOnInit();

        expect(router.navigateByUrl).toHaveBeenCalledWith('/some-path'); // Replace with actual navigation URL expected
    });

    it('should correctly check if user is admin or not', () => {
        component.isAdmin = true;
        expect(component.isAdmin).toBeTrue();
        component.isAdmin = false;
        expect(component.isAdmin).toBeFalse();
    });

    it('should set up grid options correctly', () => {
        component.ngOnInit();
        expect(component.gridOptions).toBeDefined();
        expect(component.gridReady).toBeTrue();
    });

    it('should handle selectItemRegHum method properly', () => {
        const mockOption = { id: 2, name: 'Test Option' };
        component.selectItemRegHum(mockOption);
        expect(component.selectedItem).toEqual(mockOption);
    });

    it('should handle loadOptions properly with MockCoffreParametreService', () => {
        component.loadOptions();
        expect(component.selectItemNonConformites.length).toBeGreaterThan(0);
        expect(component.selectItemNonConformites[0].id).toBe(1);
    });
});

