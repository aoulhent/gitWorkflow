import { ComponentFixture, TestBed } from '@angular/core/testing';
import { CoffeeClosureComponent } from './coffee-closure.component';
import { of, throwError } from 'rxjs';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ConfirmationService } from 'path/to/confirmation-service';
import { DialogService } from 'path/to/dialog-service';
import { CoffeeFormService } from 'path/to/coffee-form-service';
import { Router } from '@angular/router';
import { MessageService } from 'path/to/message-service';

describe('CoffeeClosureComponent', () => {
  let component: CoffeeClosureComponent;
  let fixture: ComponentFixture<CoffeeClosureComponent>;
  let confirmationService: jasmine.SpyObj<ConfirmationService>;
  let dialogService: jasmine.SpyObj<DialogService>;
  let coffeeFormService: jasmine.SpyObj<CoffeeFormService>;
  let router: jasmine.SpyObj<Router>;
  let messageService: jasmine.SpyObj<MessageService>;

  beforeEach(async () => {
    const confirmationServiceSpy = jasmine.createSpyObj('ConfirmationService', ['confirm']);
    const dialogServiceSpy = jasmine.createSpyObj('DialogService', ['open']);
    const coffeeFormServiceSpy = jasmine.createSpyObj('CoffeeFormService', ['isInvalid']);
    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);
    const messageServiceSpy = jasmine.createSpyObj('MessageService', ['add']);

    await TestBed.configureTestingModule({
      declarations: [ CoffeeClosureComponent ],
      imports: [ HttpClientTestingModule ],
      providers: [
        { provide: ConfirmationService, useValue: confirmationServiceSpy },
        { provide: DialogService, useValue: dialogServiceSpy },
        { provide: CoffeeFormService, useValue: coffeeFormServiceSpy },
        { provide: Router, useValue: routerSpy },
        { provide: MessageService, useValue: messageServiceSpy }
      ]
    })
    .compileComponents();

    confirmationService = TestBed.inject(ConfirmationService) as jasmine.SpyObj<ConfirmationService>;
    dialogService = TestBed.inject(DialogService) as jasmine.SpyObj<DialogService>;
    coffeeFormService = TestBed.inject(CoffeeFormService) as jasmine.SpyObj<CoffeeFormService>;
    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;
    messageService = TestBed.inject(MessageService) as jasmine.SpyObj<MessageService>;
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(CoffeeClosureComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  describe('#clotureDialogCancel', () => {
    it('should confirm closure and save ongoing', () => {
      confirmationService.confirm.and.callFake((options: any) => options.accept());
      spyOn(component, 'saveOngoing').and.returnValue(true);
      
      component.clotureDialogCancel();

      expect(confirmationService.confirm).toHaveBeenCalled();
      expect(component.saveOngoing).toBeTruthy();
    });

    it('should handle error during closure', () => {
      confirmationService.confirm.and.callFake((options: any) => options.accept());
      spyOn(component, 'saveOngoing').and.returnValue(false);
      spyOn(component['http'], 'post').and.returnValue(throwError({}));

      component.clotureDialogCancel();

      expect(confirmationService.confirm).toHaveBeenCalled();
      expect(messageService.add).toHaveBeenCalledWith({
        severity: 'error',
        summary: 'Erreur',
        detail: 'Location non fermÃ©e'
      });
    });
  });

  describe('#documeDialog', () => {
    it('should open dialog if form is valid', () => {
      coffeeFormService.isInvalid.and.returnValue(false);
      dialogService.open.and.returnValue({
        afterClosed: () => of({}) // Simulate dialog close
      });

      component.documeDialog();

      expect(dialogService.open).toHaveBeenCalled();
    });

    it('should handle invalid form', () => {
      coffeeFormService.isInvalid.and.returnValue(true);

      component.documeDialog();

      expect(dialogService.open).not.toHaveBeenCalled();
    });
  });
});
