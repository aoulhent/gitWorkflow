import { ComponentFixture, TestBed } from '@angular/core/testing';
import { YourComponent } from './your-component.component';
import { CoffeeClosure, CoffeeAvenant, CoffeeLocation } from './your-models';

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ YourComponent ],
      providers: [ /* Add necessary providers here */ ]
    });

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
  });

  it('should initialize CoffeeClosure on ngOnInit', () => {
    const mockLocation = new CoffeeLocation();
    mockLocation.status = "CLOTUREE";
    mockLocation.closureDate = new Date('2023-01-01');
    mockLocation.id = 1;
    mockLocation.bordereau = '1234';
    mockLocation.compte = 'account123';
    mockLocation.client = 'Client A';
    mockLocation.pdvRemiseCle = 'KeyLocation';

    component.coffreLocation = mockLocation;

    component.ngOnInit();

    expect(component.coffreClosure.closureDate).toEqual(new Date('2023-01-01'));
    expect(component.coffreClosure.id).toBe(1);
    expect(component.coffreClosure.bordereau).toBe('1234');
    expect(component.coffreClosure.compte).toBe('account123');
    expect(component.coffreClosure.client).toBe('Client A');
    expect(component.coffreClosure.pdvRemiseCle).toBe('KeyLocation');
  });

  it('should initialize CoffeeAvenant when isTransferSameAgence and not isTransferToOtherAgence', () => {
    const mockLocation = new CoffeeLocation();
    mockLocation.client = 'Client A';
    mockLocation.adresse = '123 Street';

    component.isTransferSameAgence = true;
    component.isTransferToOtherAgence = false;
    component.coffreLocation = mockLocation;

    component.ngOnInit();

    expect(component.coffreAvenant.closureDate).toEqual(jasmine.any(Date));
    expect(component.coffreAvenant.client).toBe('Client A');
    expect(component.coffreAvenant.adresse).toBe('123 Street');
  });
});


import { of, throwError } from 'rxjs';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { finalize } from 'rxjs/operators';

describe('YourComponent - Confirmation Logic', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;
  let httpMock: HttpClientTestingModule;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      declarations: [YourComponent],
      providers: [/* Mock services if needed */]
    });

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
  });

  it('should handle accept logic correctly', () => {
    const confirmationServiceSpy = spyOn(component['confirmationService'], 'confirm').and.callFake((options: any) => {
      options.accept();
    });

    const httpSpy = spyOn(component['http'], 'post').and.returnValue(of({}));
    const messageServiceSpy = spyOn(component['messageService'], 'add');

    component.coffreLocation = { id: 1 };
    component.saveOngoing = true;
    component.isClosureTemporary = true;

    component.ref = { close: jasmine.createSpy('close') };
    component.confirmationService.confirm({
      header: 'header',
      acceptLabel: 'Oui',
      rejectLabel: 'Non',
      accept: () => { },
      reject: () => { }
    });

    expect(httpSpy).toHaveBeenCalledWith(`/coffres/location/1/cloturerTransferer`, jasmine.any(Object));
    expect(messageServiceSpy).toHaveBeenCalledWith(jasmine.objectContaining({
      severity: 'info',
      summary: 'Info',
      detail: 'Location clôturée et prête pour le transfert vers une autre agence'
    }));
    expect(component.busy).toBe(false);
    expect(component.ref.close).not.toHaveBeenCalled();
  });

  it('should handle reject logic correctly', () => {
    component.ref = { close: jasmine.createSpy('close') };

    component.confirmationService.confirm({
      header: 'header',
      acceptLabel: 'Oui',
      rejectLabel: 'Non',
      accept: () => { },
      reject: () => { }
    });

    expect(component.ref.close).toHaveBeenCalledWith(null);
  });

  it('should handle HTTP error correctly', () => {
    const confirmationServiceSpy = spyOn(component['confirmationService'], 'confirm').and.callFake((options: any) => {
      options.accept();
    });

    const httpSpy = spyOn(component['http'], 'post').and.returnValue(throwError({ status: 500 }));
    const errorServiceSpy = spyOn(component['errorService'], 'httpError');

    component.coffreLocation = { id: 1 };
    component.saveOngoing = true;
    component.isClosureTemporary = true;

    component.confirmationService.confirm({
      header: 'header',
      acceptLabel: 'Oui',
      rejectLabel: 'Non',
      accept: () => { },
      reject: () => { }
    });

    expect(httpSpy).toHaveBeenCalled();
    expect(errorServiceSpy).toHaveBeenCalledWith(jasmine.any(Object));
    expect(component.busy).toBe(false);
  });
});

