import { TestBed } from '@angular/core/testing';
import { CoffreService } from './coffre.service';

describe('CoffreService', () => {
  let service: CoffreService;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [CoffreService]
    });
    service = TestBed.inject(CoffreService);
  });

  it('should update and check relation commerciale for mon client', () => {
    const mockLocation = { relationCommerciale: '12345678901234567' } as any; // Mocking CoffreLocationLight
    const mockData = { pdv: { number: 12345 } } as any; // Mocking CoffreData

    const result = service.updateAndCheckRelationCommercialeMonClient(mockLocation, mockData);
    expect(result).toBe(12345); // Expected output based on the logic
  });

  it('should return null when relation commerciale is invalid for mon client', () => {
    const mockLocation = { relationCommerciale: null } as any; // Mocking CoffreLocationLight
    const mockData = { pdv: { number: 12345 } } as any; // Mocking CoffreData

    const result = service.updateAndCheckRelationCommercialeMonClient(mockLocation, mockData);
    expect(result).toBeNull();
  });

  it('should update and check relation commerciale alone', () => {
    const mockRelationCommerciale = '12345678901234567';
    const mockData = { pdv: { number: 12345 } } as any; // Mocking CoffreData

    const result = service.updateAndCheckRelationCommercialeAlone(mockRelationCommerciale, mockData);
    expect(result).toBe(12345); // Expected output based on the logic
  });

  it('should return null when relation commerciale is invalid alone', () => {
    const mockRelationCommerciale = null;
    const mockData = { pdv: { number: 12345 } } as any; // Mocking CoffreData

    const result = service.updateAndCheckRelationCommercialeAlone(mockRelationCommerciale, mockData);
    expect(result).toBeNull();
  });

  it('should validate domicile invalidity', () => {
    const mockLocation = { compteDomiciliation: '123456', disponible: 'COFFRE' } as any; // Mocking CoffreLocation
    const mockData = { disponible: 'COFFRE' } as any; // Mocking CoffreData

    const result = service.hasDomiciliationInvalid(mockLocation, mockData);
    expect(result).toBeFalse(); // Adjust based on your logic
  });

  it('should check if relation commerciale has RciInvalid', () => {
    const mockLocation = { relationCommerciale: '12345678901234567' } as any; // Mocking CoffreLocation
    const mockData = { pdv: { number: 12345 } } as any; // Mocking CoffreData

    const result = service.hasRciInvalid(mockLocation, mockData);
    expect(result).toBeTrue(); // Adjust based on your logic
  });

  it('should return false when relation commerciale is invalid for RciInvalid', () => {
    const mockLocation = { relationCommerciale: null } as any; // Mocking CoffreLocation
    const mockData = { pdv: { number: 12345 } } as any; // Mocking CoffreData

    const result = service.hasRciInvalid(mockLocation, mockData);
    expect(result).toBeFalse();
  });
});
