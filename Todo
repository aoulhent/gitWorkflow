@Service
public class CoffreUtilService {
private final Logger logger = LoggerFactory.getLogger (Coffre UtilService.class);
private String date Pattern = "dd/MM/yyyy";
private Simple Date Format date Format = new SimpleDateFormat (this.date Pattern);
private String time Pattern = "HH:mm";
private Simple Date Format time Format = new Simple Date Format (this.time Pattern);
@Autowired
CoffreTarificationRepository coffreTarificationRepository;
@Autowired
Coffre DataRepository coffreDataRepository;
@Autowired
Coffre Template Source Repository coffreTemplateSourceRepository;
@Autowired
LoadPeriodService loadPeriodService;
@Autowired
EntityManager entityManager;
@Autowired
UserService userService;
@Autowired
CoffreLocationRepository coffreLocationRepository;
@Autowired
CoffreFacturationRepository coffre facturationRepository;
@Autowired
CoffreTransfertFichier Repository coffreTransfertFichierRepository;
@Autowired
Coffre FacturationEvenement Repository coffreFacturationEvenement Repository;
@Autowired
LoadPeriodRepository loadPeriodRepository;
@Autowired
AgGridQueryService agGridQueryService;
@Autowired
FileCompressorService fileCompressorService;
@Autowired
CoffreValidationEtape Repository coffreValidationEtape Repository;
@Autowired
CoffreFermeture Salle ForteLocationRepository coffre Fermeture Salle ForteLocation Repository;
@Autowired
Coffre Fermeture Etape Repository coffre Fermeture Etape Repository;
@Autowired
CoffreCartonSignature Repository coffre CartonSignature Repository;
@Autowired
CoffreDocument Repository coffre DocumentRepository;
@Autowired
FileCosManagement fileCosManagement;
@Value ("$(dateDebutNouvelle Location}")
private String date DebutNouvelle Location;
@Autowired
SettingsCoffres IdTerritoireMonaco settings Coffres IdTerritoireMonaco;
@Autowired
SettingsCoffres SearchVisite BetweenDates settings Coffres SearchVisite BetweenDates;
public Coffre Data loadCoffre Data (Long id) {
logger.debug("loadCoffre Data =>
" + id);
CriteriaBuilder cb = entityManager.getCriteriaBuilder();
CriteriaQuery CoffreData> query = cb.createQuery (CoffreData.class);
Root CoffreData> root = query.from (CoffreData.class);
List Predicate> predicates new LinkedList<>();
new AgGridQueryCustomizer For Security (userService.getCurrentUser(), new Security FilterDTO ()).addFilter (ropt, query, cb, predicates);
predicates.add(cb.equal (root.get("id"), id));
query.where (predicates.toArray(new Predicate [0]));
return entityManager.createQuery (query.select (root)).getSingleResult();
}
public CoffreLocation loadCoffre Location (Long id) throws Exception {
CoffreLocation coffreLocation = coffre LocationRepository.findById(id) .orElse Throw (() -> new WrongLocationException ("Cette location est erronee"));


if (coffreLocation.getStatut () != CoffreLocationStatut Enum. TRANSFERT) {
try {
this.loadCoffre Data (coffreLocation.getCoffreData().getId());
} catch (NoResultException ex) {
throw new ResponseEntityException("Vous n'etes pas autorise a acceder a ce coffre", HttpStatus.SC_FORBIDDEN);
} catch (Exception ex) {
logger.error("Error during coffre data get", ex);
throw new Exception (ex.getMessage());
}
}
return coffreLocation;
public String getDate Debut Nouvelle Location() {
return this.dateDebutNouvelle Location;
}
public boolean isOldLocation (CoffreLocation coffreLocation) throws Exception {
return this.dateFormat.parse (this.dateDebut Nouvelle Location).after (coffreLocation.getDateLocation());
public void generateCartonSignature Pdf (CoffreCartonSignature coffre CartonSignature, Coffre Data coffre Data, CoffreTemplateSource coffre Template Source) throws Exception {
this generate Pdf (coffreCartonSignature, Coffre Type PdfEnum. CARTON SIGNATURE, coffre Carton Signature.cartonSignature, Coffre Template Source Enum. CARTON SIGNATURE, coffreData, coffre Template Source, null, null, null, null, null);
public void generate Contrat Pdf (CoffreContrat coffre Contrat, Coffre Data coffre Data, Coffre Template Source coffreTemplateSource) throws Exception {
}
this generate Pdf (coffre Contrat, CoffreType PdfEnum. CONTRAT, coffre Contrat.contrat, CoffreTemplateSourceEnum. CONTRAT, coffreData, coffre TemplateSource, null, null, null, null, null);
addDocument IfDerogation (coffreData, coffre Contrat.getContratDate(), coffreContrat.getVille(), coffreTemplateSource);
}
public CoffreAttachment generate Fiche PliScelle Pdf (Coffre Fermeture Salle ForteLocation coffre Fermeture Salle ForteLocation, CoffreAttachment temporaryFile, Coffre Data coffre Data, CoffreTemplateSource coffreTemplateSource, File te
throws Exception{
this generate Pdf (coffre Fermeture Salle ForteLocation, CoffreType PdfEnum. FICHE PLI SCELLE, temporaryFile, Coffre Template SourceEnum. FICHE_PLI_SCELLE, coffreData, coffreTemplateSource, null, null, null, tempFile, document);
return temporaryFile;
public void generateAvenant Pdf (CoffreAvenant coffreAvenant, Coffre Data coffreData, Coffre Template Source coffreTemplateSource) throws Exception{
this generate Pdf (coffreAvenant, Coffre Type PdfEnum. AVENANT, coffre Avenant.avenant, Coffre Template Source Enum. AVENANT, coffreData, coffreTemplateSource, null, null, null, null, null);
addDocument IfDerogation (coffreData, coffreAvenant.getAvenant Date(), coffre Avenant.getVille (), coffre Template Source);
private void addDocument IfDerogation (Coffre Data coffreData, Date date, String ville, CoffreTemplateSource coffre Template Source) throws Exception {
if (coffreData != null && coffreData.getCoffreLocation() != null && coffreData.getCoffreLocation().getCoffre Derogation()
Coffre Document coffre Document = new Coffre Document();
coffreDocument.setVersion (OL);
coffreDocument.setVisible (true);
CoffreAttachment coffreAttachment = new CoffreAttachment ();
coffreAttachment.setVersion (OL);
coffreAttachment.setCreator (this.userService.getCurrentUser());
coffreAttachment. setFilename ("empty");
coffreDocument.setDocumentAttachment (coffreAttachment);
if (coffreData.getCoffreLocation().getCoffre Derogation().getPermanente () ) {
coffreDocument.setNom ("DEROGATION PERMANENTE");
coffreAttachment.setName("Derogation Permanente_" + new Simple Date Format ("ddMMyyyy_hhmmss").format(new Date()) + ".pdf");
this.generateDerogation Permanente Pdf (coffre Document, coffre Data, null, date, ville);
} else {
coffreDocument.setNom ("DEROGATION");
coffreAttachment.setName("Derogation_" + new Simple Date Format ("ddMMyyyy_hhmmss").format (new Date()) + ".pdf");
this generateDerogation Pdf (coffre Document, coffre Data, null, date, ville);
}
coffreDocument.setCoffreLocation (coffreData.getCoffreLocation());
coffre Document Repository. save (coffre Document);
}
!= null && coffreTemplateSource = null) {
public void generate Visite Client Pdf (CoffreVisite Client coffre Visite Client, Coffre Data coffre Data, Coffre Template Source coffre Template Source) throws Exception {
this generate Pdf (coffreVisite Client, CoffreType PdfEnum. VISITE_CLIENT, coffre VisiteClient.getVisite Client (), CoffreTemplateSourceEnum. BORDEREAU VISITE, coffreData, coffre Template Source, null, null, null, null, null);
public void generateCloture Pdf (CoffreCloture coffreCloture, Coffre Data coffre Data, Coffre Template Source coffreTemplateSource, CoffreLocation coffreLocation) throws Exception {
this.generate Pdf (coffreCloture, CoffreType PdfEnum. CLOTURE, coffre Cloture.bordereau, CoffreTemplateSourceEnum. BORDEREAU_CLOTURE, coffre Data, coffreTemplateSource, coffreLocation, null, null, null, null);



public void generateDerogation Pdf (Coffre Document coffre Document, Coffre Data coffre Data, Coffre Template Source coffreTemplateSource, Date date, String city) throws Exception {
this. generate Pdf (coffre Document, CoffreType PdfEnum. DEROGATION, coffreDocument.getDocumentAttachment (), CoffreTemplateSourceEnum. DEROGATION, coffreData, coffre Template Source, coffreData.getCoffreLocation(), date, city, null, null);
public void generateDerogation Permanente Pdf (Coffre Document coffre Document, Coffre Data coffre Data, CoffreTemplateSource coffreTemplateSource, Date date, String city) throws Exception{
this generate Pdf (coffre Document, CoffreType PdfEnum. DEROGATION PERMANENTE, coffre Document.getDocumentAttachment (), CoffreTemplateSourceEnum. DEROGATION_PERMANENTE, coffre Data,
}
coffre Template Source, coffreData.getCoffreLocation(), date, city, null, null);
private void generate Pdf (Object object, CoffreType PdfEnum coffreType PdfEnum, Coffre Attachment coffreAttachment, CoffreTemplateSourceEnum coffre Template SourceEnum, Coffre Data coffre Data, CoffreTemplateSource coffreTemplateSource,
CoffreLocation coffreLocation, Date date, String city, File tempFile Param, PDDocument document) throws Exception {
Integer fontSize = 11;
float paragraphe Space = 1.5f*15;
Integer maxLineWidth = 160;
boolean isLimitText Format = false;
if (coffreTemplateSource = null) {
LoadPeriod current Period = loadPeriodService.getCurrent Period ();
Group group = coffreData != null && coffreData.getPdv () != null && isMonaco (coffreData.getPdv ()) ? coffreData.getPdv ().getEntity().getGroup()
}
coffreTemplateSource = coffreTemplate Source Repository.findCoffreTemplateSourceByActifAndNomAndLoadPeriodAndGroup (true, coffre Template SourceEnum, current Period, group);
= null;
if (coffreTemplateSource = null) {
throw new ResponseEntityException("Le type de template " + coffreTemplateSourceEnum.toString() + "
est introuvable", HttpStatus.SC_NOT_FOUND);
}
try {
FileVo fileVO = fileCosManagement.loadFile (coffre Template Source.getTemplateAttachment().getFilename () );
InputStream inputStream = fileVo.getContent();
if ("gz".equals (StringUtils.lowerCase (Filename Utils.getExtension (coffre Template Source.getTemplateAttachment ().getFilename())))) {
inputStream = new GZIPInputStream (inputStream);
}
// Template file
document = PDDocument.load(inputStream);
InputStream file Font= CoffreUtilService.class.getClassLoader ().getResourceAsStream("fonts/arial.ttf");
try {
PDFont font = PDType0Font load (document, fileFont);
int pageNum = 0;
for (PDPage pageLocal : document.getPages()) {
List<TextToAdd toAdd = new ArrayList<>();
PDFStreamParser parser = new PDFStreamParser (pageLocal),
parser.parse();
// Get all tokens from the pageLocal
List Object> tokens = parser.getTokens ();
// Create a temporary List
List<Object> newTokens = new ArrayList<Object>();
for (Object token : tokens) {
// println "TOKEN JA "+token
if (token instanceof Operator) {
Operator op = (Operator) token,
if (op.getName().equals ("TJ")) {
// TJ contains a COSArray with COSStrings and COS Float (padding)
COSArray previous = (COSArray) newTokens.get (newTokens.size() - 1);
String string = ""
for (int k = 0; k < previous.size(); k++) {
Object arrElement = previous getObject (k);
if (arrElement instanceof COSString)
{
COSString cosString = (COSString) arrElement,
String content = cosString getString();
string += content,
}
}
String replaceString = null;
switch (coffreType PdfEnum) [
case CONTRAT: {
replaceString = this.isPlaceHolderContrat (string, (CoffreContrat) object, coffreData);
break;
}
case AVENANT: {


replaceString = this.isPlaceHolderAvenant (string, (CoffreAvenant) object, coffreData);
break;
}
case CLOTURE: {
replaceString = this.isPlaceHolderCloture (string, (CoffreCloture) object, coffreData, coffreData.getCoffreLocation() != null ? coffreData.getCoffreLocation() : coffreLocation);
break;
}
case CARTON SIGNATURE {
replaceString
break;
}
this isPlaceHolderCartonSignature (string, (CoffreCartonSignature) object, coffreData);
case VISITE CLIENT
(
replaceString = this isPlaceHolderVisite Client (string, (CoffreVisiteClient) object, coffreData);
break;
}
case FICHE PLI SCELLE
replaceString
break;
}
=
this isPlaceHolderPliScelle (string, (CoffreFermeture Salle ForteLocation) object, coffreData);
case DEROGATION I
replaceString this isPlaceHolderDerogation (string, date, city, coffreData);
break;
H
case DEROGATION PERMANENTE: I
replaceString = this.isPlaceHolderDerogation(string, date, city, coffreData);
break;
if (replaceString != null && replaceString.isEmpty() {
newTokens set (newTokens size() 1, new COSArray(E
int tmOperator Position
-1;
for (int i = 1; i<newTokens_size(); i++)
if (newTokens get (newTokens.size() - i) toString(contains ("Im")) {
tmOperator Position = i;
}
newTokens size (DE
COSFloat x = COSFloat) newTokens get (newTokens.size()
COSFloaty = (COSFloat) newTokens get (newTokens size()
font Size = 11:
if (string equalsIgnoreCase ("C_BA") ) [
if (replaceString.length() >40)
FontSize
=
}else if (replaceString.length()
FontSize = 9,
30)[
(tmOperator Position + 2));
tmOperator Position + 1));
if (string equalsIgnoreCase ("B_Q") && coffre Type PdfEnum.equals (Coffre Type PdfEnum. FICHE PLI SCELLE) && replaceString length() > 40) [
isLimitText Format = true
if (replaceString.length() >1900) [
replaceString StringUtils abbreviate (replaceString, 3000) F
fontSize = 4,
paragraphe Space = -1.5f (float) 2.50;
maxLineWidth
1
165,
} else if (replaceString.length() 1300) (
fontSize = 5,
paragraphe Space = -1 Sf (float) 3.5;
maxLineWidth = 130,
} else if (replaceString length() >1100) {
fontSize = 6
paragrapheSpace = -1.5f* (float) 4;
maxLineWidth = 110,
} else if (replaceString.length() > 800)




fontSize = 7;
paragapheSpace -15£(Eloat) 4;
maxLineWidth = 90;
else if (replaceString.length() > 600) (
EontSize = 8;
-15E* (Eloat) 5;
paragrapheSpace
maxLineWidth = 80;
1 else if (replaceString length() > 450) (
fontSize = 9;
paragraphe Space =-1 5f* (Eloat) 6;
maxLineWidth
70;
else if (replaceString.length() > 200) {
fontSize 10;
paragraphe Space = -1.5f* (Eloat) 7;
maxLineWidth = 65:
)else {
fontSize - ll;
paragrapheSpace =-l.5£* (£loat) 8;
maxLineWidth = 50;
if (string.equalsIgnoreCase ("B_ _R") & coffreTypePafEnum. equals (CoffreTYpePdfEnum. FICHE PLI SCELLE) (
if (replaceString.length()> 40) {
EontSize = B;
if (string equalsIgnoreCase ("C_ AR") E coffreT ype PafEnum equals(CoffreType PafEnum_VISITE CLIENT) )
if (replaceString.length() > 70)
fontSize = 8;
paragrapheSpace =-1.5f* (Eloat)5;
naxLineWidth = 80;
else if (replaceString-length() 50)
tontsi
Lze = 9;
paragraphe Space =-1.5f* (float)6;
maxLineWidth = 70;
toAdd.add (new TextToAdd (x. floatValue (), y-EloatValue (), replaceString, fontsize))
1/println
1/ save tokens to a temporary List
newTokensadd (token)
1/ save the replaced data back to the document 's SIteam
PDStre am newContent = new PDStream (do cunent) ;
OutputStream out = newContents-ceateOutputStream (COSName FLATE DECODE)
ContentStreamilriter writer = new ContentStreamwriter(out);
Writer WIiteTokens (newTokens);
out.close ();
/ save content
pageLocal.setContents (newContents) ;
PDPageContentStre am contentStre am = new PDPageContent Stream (document, Pagelocal, PDPageContentStream. AppendHode, APPEND, talse)
boolean finalIsLimitTextFomat = isLimítTextFornat;
float finalParagraphe Space = paragraphe Space;
int finalMaLineWidth = maxLineWidth;
toAdd.forEach (entry -> {
try {
contentStream beginText ();
contentStre am. setFont (font, entry.fontSize)
contentStream.newLineAtoffset (entry-*, entry -y);




if (finalIsLimitIextFormat) {
try {
showTextFornat (contentStrean, entry-text, finalMaxLineWidth, finalParagraphe Space);
} catch (Exception ex)
loggerinfo (ex getMessage ())
else
contentStream showTet (entIy text),
contentStream setNonStrokingColor (Color BLACK);
contentStream. endText ();
catch (IOException e) {
loggeI. info le getMessage();
contentStrean elose 0,
pageNumtt;
File tepFile = tempFileParam,
1/SAVE FILE
if (coffreAttachment l= null)
tempFile = File createTempFile ("attachement","" FilenameUtilsgetExtension(coffreAttachment getName () )+"gz")
cOffreAttachmentsetFilename (tempFile getName ( )
documentsave (new GZIPOutputStream(new BufferedOutputStream(new FileOutputstream(tempFile getAbsolute File() )))D
if (tempFileParam = null)
fileCosManagementsaveFile (tempFile getName (),new FileInputStream(tempFile) Mimetypes getInstance ()LgetMimetype (tempFile), temp Filelength() );
documentclose ()
catch (IOException e)
e printStackTrace ();
} finally {
if (documernt I= null)
doeuTent
close O,
1 catch (IOException e) {
e-printStackTrace ();
finally {
public boolean isMonaco (Pdv pdv) throws Exception{
tryl
return pdv -getEntity () = null && pdv getEntity () -getGrOup () = null te pdv.getEntity () -getGroup ()getNumber 0= nul1
&& settingsCo ffresIdTerritoireMonaco I= null cE settingsCoffresIdTerritoireMonaco getValue () != null
&& pdv -getEntity 0
tity() -getGroup () -getNumber() -equals (settingsCoffresIdTerritoireMonaco.getvalue ());
catch (SettingsNotFoundException snf) {
retuIn false;
catch (Exception ex) (
throw ex;
}
}
