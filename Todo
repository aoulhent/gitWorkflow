describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;
  let mockCoffreCartonSignatureService: any;
  let mockCoffreDocumentService: any;
  let mockHttp: any;
  let mockErrorService: any;
  let mockDialogService: any;
  let mockGridOptions: any;

  beforeEach(() => {
    mockCoffreCartonSignatureService = jasmine.createSpyObj('CoffreCartonSignatureService', ['loadByLocation']);
    mockCoffreDocumentService = jasmine.createSpyObj('CoffreDocumentService', ['loadByLocation']);
    mockHttp = jasmine.createSpyObj('HttpClient', ['put']);
    mockErrorService = jasmine.createSpyObj('ErrorService', ['httpError']);
    mockDialogService = jasmine.createSpyObj('DialogService', ['open']);
    mockGridOptions = { api: jasmine.createSpyObj('api', ['setRowData', 'refreshRows']) };

    TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: CoffreCartonSignatureService, useValue: mockCoffreCartonSignatureService },
        { provide: CoffreDocumentService, useValue: mockCoffreDocumentService },
        { provide: HttpClient, useValue: mockHttp },
        { provide: ErrorService, useValue: mockErrorService },
        { provide: DialogService, useValue: mockDialogService }
      ]
    });

    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
    component.gridOptions = mockGridOptions;
  });

  it('should call refreshData and createColumnDefs on ngOnInit', () => {
    spyOn(component, 'refreshData');
    spyOn(component, 'createColumnDefs').and.returnValue([]);
    component.ngOnInit();
    expect(component.refreshData).toHaveBeenCalled();
    expect(component.gridOptions.columnDefs).toEqual([]);
  });

  it('should remove invisible documents for admin in refreshData', () => {
    component.data = [
      { visible: true },
      { visible: false }
    ] as CoffreAvenant[];
    spyOn(component, 'isAdmin').and.returnValue(true);

    component.refreshData();

    expect(component.data.length).toBe(1);
  });

  it('should call loadByLocation and update CoffreCartonSignatures in refreshAvenant', () => {
    const mockSignatures = [{}] as CoffreCartonSignature[];
    mockCoffreCartonSignatureService.loadByLocation.and.returnValue(of(mockSignatures));

    component.refreshAvenant(1);

    expect(component.coffreLocation.coffreCartonSignatures).toEqual(mockSignatures);
  });

  it('should call loadByLocation and update CoffreDocuments in refreshDocument', () => {
    const mockDocuments = [{}] as CoffreDocument[];
    mockCoffreDocumentService.loadByLocation.and.returnValue(of(mockDocuments));

    component.refreshDocument(1);

    expect(component.coffreLocation.coffreDocuments).toEqual(mockDocuments);
  });

  it('should call http.put with the correct URL and payload in setVisible', () => {
    const mockAvenant = { id: 1, visible: true } as CoffreAvenant;

    component.setVisible(mockAvenant);

    expect(mockHttp.put).toHaveBeenCalledWith('/api/coffre/avenant', { 'id': 1, 'disable': mockAvenant });
  });

  // More tests based on the dialog logic can be added here...

});
