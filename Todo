import { TestBed, ComponentFixture } from '@angular/core/testing';
import { of } from 'rxjs';
import { YourComponent } from './your-component.component';
import { HttpClient } from '@angular/common/http';
import { ErrorService } from 'src/app/services/error.service';
import { MessageService } from 'primeng/api';
import { ConfirmationService } from 'primeng/api';
import { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog';
import { CoffreQualiteRepresentantService } from 'src/app/services/coffre-qualite-representant.service';
import { CoffreFormService } from 'src/app/services/coffre-form.service';

describe('YourComponent', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;

  const mockConfig = {
    data: {
      coffreDataTransfer1: {},
      client: 'TestClient',
      compte: 'TestCompte',
      pdvs: [],
      coffreClotureFromLocation: null,
      coffreLocation: { statut: 'ACTIVE' },
      pdvRemiseCle: 'TestRemiseCle',
      isTransferSameAgence: true,
      isTransferOtherAgence: false,
      labelButton: 'TestButton',
      labelHeader: 'TestHeader',
      isClosure: false,
      isClosureTemporary: false,
      coffreTarifications: [],
      coffreData: {}
    }
  };

  const mockQualiteRepresentantService = {
    load: jasmine.createSpy('load').and.returnValue(of([
      { nom: 'QualRep1', id: 1, visible: true },
      { nom: 'QualRep2', id: 2, visible: false }
    ]))
  };

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [YourComponent],
      providers: [
        { provide: HttpClient, useValue: {} },
        { provide: ErrorService, useValue: {} },
        { provide: MessageService, useValue: {} },
        { provide: ConfirmationService, useValue: {} },
        { provide: DynamicDialogRef, useValue: {} },
        { provide: DynamicDialogConfig, useValue: mockConfig },
        { provide: CoffreQualiteRepresentantService, useValue: mockQualiteRepresentantService },
        { provide: CoffreFormService, useValue: {} }
      ]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should initialize component with provided DynamicDialogConfig', () => {
    expect(component.client).toBe('TestClient');
    expect(component.compte).toBe('TestCompte');
    expect(component.pdvRemiseCle).toBe('TestRemiseCle');
    expect(component.isTransferSameAgence).toBe(true);
    expect(component.isTransferOtherAgence).toBe(false);
  });

  it('should set up coffreCloture in ngOnInit', () => {
    component.ngOnInit();
    expect(component.coffreCloture).toBeDefined();
    expect(component.coffreCloture.clotureDate).toBeTruthy();
    expect(component.coffreCloture.client).toBe('TestCompte');
  });

  it('should set up coffreAvenant in ngOnInit when isTransferSameAgence is true', () => {
    component.ngOnInit();
    expect(component.coffreAvenant).toBeDefined();
    expect(component.coffreAvenant.avenantDate).toBeTruthy();
    expect(component.coffreAvenant.client).toBe('TestClient');
  });

  it('should load and process qualiteRepresentant data', () => {
    component.ngOnInit();
    expect(mockQualiteRepresentantService.load).toHaveBeenCalled();
    expect(component.selectItemQualRepEnum.length).toBe(1); // Only one visible item
    expect(component.selectItemQualRepEnum[0].label).toBe('QualRep1');
  });
});
