import { ComponentFixture, TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { ActivatedRoute, Router } from '@angular/router';
import { of } from 'rxjs';
import { DialogService } from 'primeng/dynamicdialog';
import { UserService } from 'src/app/services/user.service';
import { ErrorService } from 'src/app/services/error.service';
import { ConfirmationService } from 'primeng/api';
import { CoffreParametreService } from 'src/app/services/coffre-parametre.service';
import { CoffreFormService } from 'src/app/services/coffre-form.service';
import { CoffreCartonSignatureService } from 'src/app/services/coffre-carton-signature.service';
import { CoffreDocumentService } from 'src/app/services/coffre-document.service';
import { MessageService } from 'primeng/api';
import { CoffreContratDialogComponent } from 'src/app/components/coffre-contrat-dialog/coffre-contrat-dialog.component';
import { CoffreComponent } from './coffre.component';

describe('CoffreComponent', () => {
  let component: CoffreComponent;
  let fixture: ComponentFixture<CoffreComponent>;
  let httpMock: HttpTestingController;
  let userServiceStub: Partial<UserService>;

  beforeEach(async () => {
    userServiceStub = {
      isApplicationAdmin: jasmine.createSpy('isApplicationAdmin').and.returnValue(true)
    };

    await TestBed.configureTestingModule({
      declarations: [CoffreComponent],
      imports: [HttpClientTestingModule],
      providers: [
        { provide: ActivatedRoute, useValue: { params: of({ id: 1 }) } },
        { provide: Router, useValue: {} },
        { provide: UserService, useValue: userServiceStub },
        ErrorService,
        ConfirmationService,
        CoffreParametreService,
        CoffreFormService,
        CoffreCartonSignatureService,
        CoffreDocumentService,
        DialogService,
        MessageService
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(CoffreComponent);
    component = fixture.componentInstance;
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should initialize admin status on init', () => {
    component.ngOnInit();
    expect(component.isAdmin).toBeTrue();
  });

  it('should set conforme status based on contract', () => {
    component.coffreContrat = { conforme: true };
    component.ngOnInit();
    expect(component.conforme).toBe('true');

    component.coffreContrat = { conforme: false };
    component.ngOnInit();
    expect(component.conforme).toBe('false');
  });

  it('should set documentArchive based on contract', () => {
    component.coffreContrat = { documentArchive: 'someArchive' };
    component.ngOnInit();
    expect(component.documentArchive).toBe('someArchive');

    component.coffreContrat = { documentArchive: null };
    component.ngOnInit();
    expect(component.documentArchive).toBeNull();
  });

  it('should call refreshDataAuditContrat on init', () => {
    spyOn(component, 'refreshDataAuditContrat');
    component.ngOnInit();
    expect(component.refreshDataAuditContrat).toHaveBeenCalled();
  });

  it('should make HTTP call in refreshDataAuditContrat', () => {
    component.isAdmin = true;
    component.isReadOnly = true;
    component.coffreContrat = { id: 1 };
    component.coffreLocationId = 123;

    component.refreshDataAuditContrat();

    const req = httpMock.expectOne('/api/coffres/location/123/contrats/histories');
    expect(req.request.method).toBe('GET');
    req.flush([{ id: 1 }]);

    expect(component.attachmentContracts).toBeDefined();
  });

  it('should open contract dialog on valid form submission', () => {
    const dialogService = TestBed.inject(DialogService);
    spyOn(dialogService, 'open').and.returnValue({
      onClose: of({ contrat: { id: 1 } })
    } as any);

    component.coffreLocationId = 123;
    component.client = 'Client Name';
    component.adresse = 'Client Address';
    component.coffreLocation = { personneMorale: true, site: 'Site Name' };
    component.form = { valid: true } as any;

    component.contratDialog();

    expect(dialogService.open).toHaveBeenCalledWith(CoffreContratDialogComponent, jasmine.any(Object));
    expect(component.coffreContrat).toBeDefined();
  });
});
